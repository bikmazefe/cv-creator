{"version":3,"sources":["styles/edit.svg","components/GeneralInfo.js","styles/trash-2.svg","styles/x-circle.svg","components/EducationExperience.js","styles/plus.svg","components/EducationFields.js","components/JobExperience.js","components/JobFields.js","App.js","index.js"],"names":["GeneralInfo","state","info","name","email","phone","editable","formView","bind","textView","handleChange","handleSubmit","e","this","setState","target","value","preventDefault","className","htmlFor","type","onChange","onClick","src","editImage","Component","EducationExperience","props","experience","schoolName","data","titleOfStudy","dateOfStudy","toggleForm","handleCancel","item","handleEdit","index","onSubmit","cancel","alt","edit","handleDelete","trash","Education","experiences","formVisible","newExperience","newForm","required","experiencesCopy","splice","plus","map","JobExperience","companyName","positionTitle","description","startDate","endDate","JobFields","placeholder","App","EducationFields","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc6b8dd1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/edit.2b69c19a.svg\";","import React, { Component } from 'react';\nimport editImage from '../styles/edit.svg'\n\n\nclass GeneralInfo extends Component {\n    constructor(){\n        super()\n\n        this.state = {\n            info: {\n                name: \"\",\n                email: \"\",\n                phone: \"\"\n            },\n            editable: false\n        }\n        this.formView = this.formView.bind(this);\n        this.textView = this.textView.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n\n    handleChange(e) {\n        this.setState({\n            info: {\n                ...this.state.info,\n                [e.target.name]: e.target.value\n            }\n        })\n    }\n\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.setState({editable: false})\n    }\n\n    formView(info) {\n        return <form className = \"form-view\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input type=\"text\" \n                           value = {info.name} \n                           name = \"name\"\n                           onChange = {this.handleChange}\n                           />\n                    <label htmlFor=\"email\">Email</label>\n                    <input type=\"email\" \n                           value = {info.email} \n                           name = \"email\"\n                           onChange = {this.handleChange}\n                           />\n                    <label htmlFor=\"phone\">Phone</label>\n                    <input type=\"text\" \n                           value = {info.phone} \n                           name = \"phone\"\n                           onChange = {this.handleChange}\n                           />\n                    <input type=\"submit\" \n                           value=\"Save\"\n                           onClick= {this.handleSubmit}\n                           />\n               </form>\n    }\n\n    textView(info) {\n        return <div className = \"text-view\">\n                    <p>Name: <span>{info.name}</span></p>\n                    <p>Email: <span>{info.email}</span></p>\n                    <p>Phone: <span>{info.phone}</span></p>\n                    <img \n                        onClick = { () => this.setState({editable: true})}\n                        className = \"edit-button\"\n                        src = {editImage}/>\n\n               </div>\n    }\n\n\n\n\n\n    render() {\n        const { info } = this.state;\n        return (\n            <div className = \"general-info\">\n                <h2 className=\"section-title\">General Info</h2>\n                {this.state.editable ? this.formView(info) : this.textView(info)}\n            </div>\n        );\n    }\n}\n\nexport default GeneralInfo;","export default __webpack_public_path__ + \"static/media/trash-2.815ce405.svg\";","export default __webpack_public_path__ + \"static/media/x-circle.8da50ca8.svg\";","import React, { Component } from 'react';\nimport edit from '../styles/edit.svg'\nimport trash from '../styles/trash-2.svg'\nimport cancel from '../styles/x-circle.svg'\n\nclass EducationExperience extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            editable: false,\n            experience: {\n                schoolName: this.props.data.schoolName,\n                titleOfStudy: this.props.data.titleOfStudy,\n                dateOfStudy: this.props.data.dateOfStudy\n            }\n        }\n\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.formView = this.formView.bind(this);\n        this.textView = this.textView.bind(this);\n    }\n\n    toggleForm() {\n        this.setState({editable: !this.state.editable})\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        let item = {...this.state.experience};\n        this.props.handleEdit(this.props.index, item);\n        this.toggleForm();\n    }\n\n    handleChange(e) {\n        this.setState({\n            experience: {\n                ...this.state.experience,\n                [e.target.name]: e.target.value\n            }\n        })\n    }\n\n    handleCancel() {\n        this.toggleForm();\n        this.setState({\n            experience: {\n                schoolName: this.props.data.schoolName,\n                titleOfStudy: this.props.data.titleOfStudy,\n                dateOfStudy: this.props.data.dateOfStudy\n            }\n        })\n    }\n\n    formView(){\n        return <form className = \"form-view\"onSubmit = {this.handleSubmit}>\n                <label htmlFor=\"schoolName\">School Name:</label>\n                <input type=\"text\" \n                         name = \"schoolName\"\n                         value = {this.state.experience.schoolName}\n                         onChange = {this.handleChange}\n                         />\n                  <label htmlFor=\"titleOfStudy\">Title of Study:</label>\n                  <input type=\"text\" \n                         name = \"titleOfStudy\"\n                         value = {this.state.experience.titleOfStudy}\n                         onChange = {this.handleChange}\n                         />\n                <label htmlFor=\"dateOfStudy\">Date of Study:</label>\n                  <input type=\"text\" \n                         name = \"dateOfStudy\"\n                         value = {this.state.experience.dateOfStudy}\n                         onChange = {this.handleChange}\n                         />\n                 <input type=\"submit\" value=\"Save\"/>\n                 <button className = \"cancel\" onClick = {this.handleCancel}>\n                     <img src={cancel} alt=\"\"/>\n                     Cancel\n                </button>\n               </form>\n    }\n\n    textView(){\n\n        return <div className = \"education-experience\" >\n                    <h2>{this.state.experience.schoolName}</h2>\n                    <p>{this.state.experience.titleOfStudy} - {this.state.experience.dateOfStudy}</p>\n                    <img \n                        onClick = {this.toggleForm}\n                        src = {edit}\n                        className = \"edit-experience\"\n                    />\n\n                    <img \n                        onClick = {() => \n                            this.props.handleDelete(this.props.index)}\n                        src = {trash}\n                        className = \"delete-experience\"\n                    />\n                </div>\n    }\n\n\n    render() {\n        return (\n           <div className=\"\">\n               {this.state.editable ? this.formView() : this.textView()}\n           </div> \n        );\n    }\n}\n\nexport default EducationExperience;","export default __webpack_public_path__ + \"static/media/plus.9884e6b0.svg\";","import React, { Component } from 'react';\nimport EducationExperience from './EducationExperience'\nimport plus from '../styles/plus.svg';\n\nclass Education extends Component {\n    constructor(){\n        super()\n\n        this.state = {\n            experiences: [],\n            formVisible: false,\n            newExperience: {\n                schoolName: \"\",\n                titleOfStudy: \"\",\n                dateOfStudy: \"\"\n            }\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.newForm = this.newForm.bind(this);\n    }\n\n    toggleForm() {\n        this.setState({formVisible: !this.state.formVisible})\n    }\n\n    newForm(){\n        return <form className = \"form-view\" onSubmit = {this.handleSubmit}>\n                  <label htmlFor=\"schoolName\">School Name:</label>\n                  <input type=\"text\" \n                         name = \"schoolName\"\n                         value = {this.state.newExperience.schoolName}\n                         onChange = {this.handleChange}\n                         required\n                         />\n                  <label htmlFor=\"titleOfStudy\">Title of Study:</label>\n                  <input type=\"text\" \n                         name = \"titleOfStudy\"\n                         value = {this.state.newExperience.titleOfStudy}\n                         onChange = {this.handleChange}\n                         required\n                         />\n                  <label htmlFor=\"schoolName\">Class:</label>\n                  <input type=\"text\" \n                         name = \"dateOfStudy\"\n                         value = {this.state.newExperience.dateOfStudy}\n                         onChange = {this.handleChange}\n                         required\n                         />\n                 <input type=\"submit\" value=\"Create\"/>\n               </form>\n    }\n\n    handleChange(e) {\n        this.setState({\n            newExperience: {\n                ...this.state.newExperience,\n                [e.target.name]: e.target.value\n            }\n        })\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        const newExperience = {...this.state.newExperience}\n        this.setState({\n           experiences: [...this.state.experiences, newExperience]\n        })\n        this.toggleForm();\n        this.setState({\n            newExperience: {\n                    schoolName: \"\",\n                    titleOfStudy: \"\",\n                    dateOfStudy: \"\"\n            }\n        })\n    }\n\n    handleDelete(index) {\n        let experiencesCopy = [...this.state.experiences];\n        experiencesCopy.splice(index, 1);\n        this.setState({experiences: experiencesCopy})\n    }\n\n\n    handleEdit(index, item) {\n        let experiencesCopy = [...this.state.experiences];\n        experiencesCopy[index] = item;\n        this.setState({experiences: experiencesCopy});\n    }\n\n    render() {\n        return (\n            <div className = \"education-fields\">\n                <h2 className=\"section-title\">Education</h2>\n                <img \n                    onClick = {this.toggleForm} \n                    className = \"add-button\"\n                    src = {plus}\n                />\n                {this.state.formVisible ? this.newForm() : \"\"}\n                {this.state.experiences.map((item, index) => {\n                    return <EducationExperience \n                                data = {item} \n                                index = {index}\n                                key = {index}  \n                                handleEdit = {this.handleEdit}\n                                handleDelete = {this.handleDelete}/>\n                })}\n            </div>\n        );\n    }\n}\n\nexport default Education;","import React, { Component } from 'react';\nimport edit from '../styles/edit.svg'\nimport trash from '../styles/trash-2.svg'\nimport cancel from '../styles/x-circle.svg'\n\n\nclass JobExperience extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            editable: false,\n            experience: {\n                companyName: this.props.data.companyName,\n                positionTitle: this.props.data.positionTitle,\n                description: this.props.data.description,\n                startDate: this.props.data.startDate,\n                endDate: this.props.data.endDate\n            }\n        }\n\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.formView = this.formView.bind(this);\n        this.textView = this.textView.bind(this);\n    }\n\n    toggleForm() {\n        this.setState({editable: !this.state.editable})\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        let item = {...this.state.experience};\n        this.props.handleEdit(this.props.index, item);\n        this.toggleForm();\n    }\n\n    handleChange(e) {\n        this.setState({\n            experience: {\n                ...this.state.experience,\n                [e.target.name]: e.target.value\n            }\n        })\n    }\n\n    handleCancel() {\n        this.toggleForm();\n        this.setState({\n            experience:  {\n                companyName: this.props.data.companyName,\n                positionTitle: this.props.data.positionTitle,\n                description: this.props.data.description,\n                startDate: this.props.data.startDate,\n                endDate: this.props.data.endDate\n            }\n        })\n    }\n\n    formView(){\n        return <form onSubmit = {this.handleSubmit}>\n                  <input type=\"text\" \n                         name = \"companyName\"\n                         value = {this.state.experience.companyName}\n                         onChange = {this.handleChange}\n                         required\n                         />\n                  <input type=\"text\" \n                         name = \"positionTitle\"\n                         value = {this.state.experience.positionTitle}\n                         onChange = {this.handleChange}\n                         required\n                         />\n                  <textarea\n                         name = \"description\"\n                         value = {this.state.experience.dateOfStudy}\n                         onChange = {this.handleChange}\n                         />\n                 <input type=\"text\" \n                         name = \"startDate\"\n                         value = {this.state.experience.startDate}\n                         onChange = {this.handleChange}\n                         required\n                         \n                         />\n                <input type=\"text\" \n                         name = \"endDate\"\n                         value = {this.state.experience.endDate}\n                         onChange = {this.handleChange}\n                         />\n                <input type=\"submit\" value=\"Edit\"/>\n                 <button onClick = {this.handleCancel}>Cancel</button>\n               </form>\n    }\n\n    textView(){\n\n        return <div className = \"education-experience\" >\n                    <h2>{this.state.experience.companyName}</h2>\n                    <p>{this.state.experience.positionTitle} | {this.state.experience.startDate} - {this.state.experience.endDate || \"...\"}</p>\n                    <p className = \"description\">{this.state.experience.description}</p>\n                    <img \n                        onClick = {this.toggleForm}\n                        src = {edit}\n                        className = \"edit-experience\"\n                    />\n                    <img \n                        onClick = {() => \n                            this.props.handleDelete(this.props.index)}\n                        src = {trash}\n                        className = \"delete-experience\"\n                    />\n                </div>\n    }\n\n\n    render() {\n        return (\n           <div className=\"\">\n               {this.state.editable ? this.formView() : this.textView()}\n           </div> \n        );\n    }\n}\n\nexport default JobExperience;","import React, { Component } from 'react';\nimport JobExperience from './JobExperience'\nimport plus from '../styles/plus.svg';\n\nclass JobFields extends Component {\n    constructor(){\n        super()\n\n        this.state = {\n            experiences: [],\n            formVisible: false,\n            newExperience: {\n                companyName: \"\",\n                positionTitle: \"\",\n                description: \"\",\n                startDate: \"\",\n                endDate: \"\"\n            }\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.newForm = this.newForm.bind(this);\n    }\n\n    toggleForm() {\n        this.setState({formVisible: !this.state.formVisible})\n    }\n\n    newForm(){\n        return <form className = \"form-view\" onSubmit = {this.handleSubmit}>\n                  <label htmlFor=\"companyName\">Company:</label>\n                  <input type=\"text\" \n                         name = \"companyName\"\n                         value = {this.state.newExperience.companyName}\n                         onChange = {this.handleChange}\n                         />\n                  <label htmlFor=\"positionTitle\">Position Title:</label>\n                  <input type=\"text\" \n                         name = \"positionTitle\"\n                         value = {this.state.newExperience.positionTitle}\n                         onChange = {this.handleChange}\n                         />\n                  <label htmlFor=\"description\">Description</label>\n                  <textarea\n                         name = \"description\"\n                         value = {this.state.newExperience.dateOfStudy}\n                         onChange = {this.handleChange}\n                         />\n\n                <label htmlFor=\"description\">Start Date:</label>\n                <input type=\"text\" \n                         name = \"startDate\"\n                         value = {this.state.newExperience.startDate}\n                         onChange = {this.handleChange}\n                         />\n                <label htmlFor=\"description\">End Date:</label>\n                <input type=\"text\" \n                         name = \"endDate\"\n                         value = {this.state.newExperience.endDate}\n                         onChange = {this.handleChange}\n                         placeholder = \"Leave empty for ongoing jobs\"\n                         />\n                 <input type=\"submit\" value=\"Create\"/>\n               </form>\n    }\n\n    handleChange(e) {\n        this.setState({\n            newExperience: {\n                ...this.state.newExperience,\n                [e.target.name]: e.target.value\n            }\n        })\n    }\n\n    handleSubmit(e){\n        e.preventDefault();\n        const newExperience = {...this.state.newExperience}\n        this.setState({\n           experiences: [...this.state.experiences, newExperience]\n        })\n        this.toggleForm();\n        this.setState({\n            newExperience: {\n                companyName: \"\",\n                positionTitle: \"\",\n                description: \"\",\n                startDate: \"\",\n                endDate: \"\"\n            }\n        })\n    }\n\n    handleDelete(index) {\n        let experiencesCopy = [...this.state.experiences];\n        experiencesCopy.splice(index, 1);\n        this.setState({experiences: experiencesCopy})\n    }\n\n\n    handleEdit(index, item) {\n        let experiencesCopy = [...this.state.experiences];\n        experiencesCopy[index] = item;\n        this.setState({experiences: experiencesCopy});\n    }\n\n    render() {\n        return (\n            <div className = \"job-fields\">\n                <h2 className=\"section-title\">Jobs</h2>\n                <img \n                    onClick = {this.toggleForm} \n                    className = \"add-button\"\n                    src = {plus}\n                />\n\n                {this.state.formVisible ? this.newForm() : \"\"}\n                {this.state.experiences.map((item, index) => {\n                    return <JobExperience \n                                data = {item} \n                                index = {index}\n                                key = {index} \n                                handleEdit = {this.handleEdit}\n                                handleDelete = {this.handleDelete}/>\n                })}\n            </div>\n        );\n    }\n}\n\nexport default JobFields;","import './styles/style.scss'\nimport GeneralInfo from './components/GeneralInfo'\nimport EducationFields from './components/EducationFields'\nimport JobFields from './components/JobFields'\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <main>\n            <GeneralInfo />\n            <div className=\"details\">\n              <EducationFields/>\n              <JobFields/>\n            </div>\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}